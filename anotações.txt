intro BDR 
1-ferramentas trabalhar com laravel 8 
	-setup
		-git clone https://github.com/especializati/curso-laravel-8-relacionamentos-tabelas.git my-project
	-explicação do andamento do curso 

2-instalar o laravel 8 com o docker 
	-clonado o referido repositório 
	-apagado o histórico de git antigo 
		rm -rf .git
	-criando .env 
		cp .env.example .env 
	-configurando o novo .env 
	-subido os containers 
		docker-compose up -d
	-instalado o composer dentro do container da image (laravel_8)
		docker-compose exec laravel_8 bash 
		composer install
	-gerado a key generate 
		php artisan key:generate
	subido a aplicação 
		127.0.0.1:8180 

3-configurações no laravel 8 (ambiente docker) 
	-em DB_HOST laterado para o nome do container que está usando DB 
		mysql
	-ainda em .env, tudo de cache, em vez de ir para file, direciona para servidor redis, REDIS_HOST tmb em redis 
	-em config/app.php, o 'timezone' altera para 'America/Sao_Paulo'
	-rodada as migration para a criação de tabelas 
		php artisan migrate 
	
4-versionar projeto laravel e armazenar no github 
	-criado o repositorio do curso no github e executado o commit e push 

relacionamentos de tabelas 
5-laravel relacionamento One to One
	- de um para um 
	-a model 'User' será relacionada com uma nova model 'Preference' 
	-criada a model Preference juntamente com sua migration
		php artisan make:model Preference -m
	-a migration 'Preference' recebe o id de comunicação com a tabela principa, 'User'
		a tabela mais fraca sempre recebe o id de comunicação para alcançar a tabela mais forte 
			$table->foreignId('user_id')->constrained('users');
	-após a configuração da migration 'prefrences', php artisan migrate 
	-configurado a $fillable da model 'Preference'
	-feito o relacionamento entre as models 'User' e 'Preference' 
		no final da model 'User', feito o relacionamento 'hasOne' para Preference. 
		no final da model 'Preference', feito o relacionamento 'belongTo' para User. 
	-utilizando o factory/UserFacotry.php, acessando o tinker, criado 10 usuarios fake 
		php artisan tinker
			\App\Models\User::factory()->count(10)->create();
	-criada uma rota para testar o relacionamento 
			rota /one-to-one (primeira)
	
6-laravel relacionamentos One to Many (e inverso)
	-na maioria dos sistemas, É O MAIS USADO!
	-o relacionamento terá cursos, módulo e lições 
	-criada a model Course juntamente com sua migration
		php artisan make:model Course -m
	-criada a model Module juntamente com sua migration
		php artisan make:model Module -m
	-criada a model Lesson juntamente com sua migration
		php artisan make:model Lesson -m
	-configurada as referidas migration com suas foreignId e demais tabelas 
	-php artisan migrate
	-configurado as $fillable das referidas Models 
	-realizada toda configuração de relacionamentos entre as models 

	pausa 07:00 min
		

